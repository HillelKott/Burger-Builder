{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/input.js","components/UI/Input/input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","requierd","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updatedObject","target","checkValidity","setState","submitHeandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementArray","key","push","id","config","form","map","formElement","elementtype","invalid","shuldvalidte","changed","loading","errorMessage","error","message","authRedirect","isAuhtenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","Input","inputElement","inputClasses","InputElement","Invalid","onChange","join","options","option","displayValue","Label","label"],"mappings":"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","file":"static/js/4.13449542.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2R2K2\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport classes from \"./Auth.module.css\";\r\n\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport Input from \"../../components/UI/Input/input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { updatedObject, checkValidity } from \"../../shared/utilitiy\";\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Addres'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    requierd: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    requierd: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n        },\r\n        isSignup: true\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updatedObject(this.state.controls, {\r\n            [controlName]: updatedObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n        this.setState({ controls: updatedControls });\r\n    }\r\n\r\n    submitHeandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n    };\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return { isSignup: !prevState.isSignup }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const formElementArray = [];\r\n        for (const key in this.state.controls) {\r\n            formElementArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        };\r\n        let form = formElementArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementtype={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.placeholder}\r\n                invalid={!formElement.config.valid}\r\n                shuldvalidte={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => { this.inputChangedHandler(event, formElement.id) }}\r\n            />\r\n        ));\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />;\r\n        };\r\n        let errorMessage = null;\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n        let authRedirect = null;\r\n        if (this.props.isAuhtenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHeandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuhtenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirect: state.auth.authRedirectPath\r\n    }\r\n};\r\n\r\nconst mapDispathToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispathToProps)(Auth);","import React from \"react\";\r\n\r\nimport classes from './input.module.css'\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shuldvalidte && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    };\r\n\r\n    switch (props.elementtype) {\r\n        case ('input'):\r\n            inputElement = <input onChange={props.changed} className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea onChange={props.changed} className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select onChange={props.changed} className={inputClasses.join(' ')} value={props.value}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}> {option.displayValue}</option>\r\n                    ))}\r\n                </select >\r\n            )\r\n            break;\r\n\r\n        default: inputElement = <input\r\n            className={inputClasses.join(' ')}\r\n            {...props.elementConfig}\r\n            value={props.value}\r\n            onChange={props.changed} />;\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"input_Input__3RI6i\",\"Label\":\"input_Label__1W2P6\",\"InputElement\":\"input_InputElement__2rKU-\",\"Invalid\":\"input_Invalid__D-t9c\"};"],"sourceRoot":""}