{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactDate/ContactDate.js","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/Checkout.js","components/UI/Input/input.js","components/UI/Input/input.module.css","containers/Checkout/ContactDate/ContactDate.module.css"],"names":["module","exports","ContactDate","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","requierd","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHeandler","event","preventDefault","formData","key","order","ingredients","props","ings","price","orderData","userId","axios","post","then","response","setState","loading","history","push","catch","error","onOrderBurger","token","inputChangeHeandler","inputIden","updatedFormElement","updatedObject","target","checkValidity","updatedOrderForm","formElementArray","this","id","config","form","onSubmit","map","formElement","elementtype","invalid","shuldvalidte","changed","Button","btnType","disabled","Spinner","className","classes","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","CheckoutSummary","style","width","margin","Burger","clicked","checkoutCanceld","checkoutContineu","Checkout","checkoutCanceldHeandler","goBabk","checkoutContineuHeandler","replace","summary","to","purcasedRedirect","purchased","path","match","component","ContactData","Input","inputElement","inputClasses","InputElement","Invalid","onChange","join","option","Label","label"],"mappings":"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","file":"static/js/3.b254d5b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3OB4L\"};","import React, { Component } from \"react\";\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport classes from './ContactDate.module.css';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Input from '../../../components/UI/Input/input';\r\nimport axios from '../../../axios-orders';\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport { updatedObject, checkValidity } from \"../../../shared/utilitiy\";\r\n\r\nimport * as actions from \"../../../store/actions/index\";\r\n\r\nclass ContactDate extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    requierd: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    requierd: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    requierd: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                minLength: 3,\r\n                maxLength: 7\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    requierd: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    requierd: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false\r\n    };\r\n\r\n    orderHeandler = (event) => {\r\n        event.preventDefault();\r\n        const formData = {};\r\n        for (const key in this.state.orderForm) {\r\n            formData[key] = this.state.orderForm[key].value;\r\n        };\r\n\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        };\r\n\r\n        axios.post('/orders.json', order)\r\n            .then(response => {\r\n                this.setState({ loading: false });\r\n                this.props.history.push('/');\r\n            })\r\n            .catch(error => {\r\n                this.setState({ loading: false });\r\n            })\r\n\r\n        this.props.onOrderBurger(order, this.props.token)\r\n\r\n    };\r\n\r\n    inputChangeHeandler = (event, inputIden) => {\r\n\r\n        const updatedFormElement = updatedObject(this.state.orderForm[inputIden],\r\n            {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.orderForm[inputIden].validation),\r\n                touched: true\r\n            });\r\n\r\n        const updatedOrderForm = checkValidity(this.state.orderForm, {\r\n            [inputIden]: updatedFormElement\r\n        });\r\n\r\n        let formIsValid = true;\r\n        for (const key in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[key].valid && formIsValid;\r\n        }\r\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const formElementArray = [];\r\n        for (const key in this.state.orderForm) {\r\n            formElementArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        };\r\n        let form = (\r\n            <form onSubmit={this.orderHeandler}>\r\n                {formElementArray.map(formElement => (\r\n                    <Input key={formElement.id}\r\n                        elementtype={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.placeholder}\r\n                        invalid={!formElement.config.valid}\r\n                        shuldvalidte={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={event => { this.inputChangeHeandler(event, formElement.id) }}\r\n                    />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER </Button>\r\n            </form>\r\n        );\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n        return (\r\n            <div className={classes.ContactDate}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactDate, axios));","import React from \"react\";\r\n\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css'\r\n\r\nconst CheckoutSummary = props => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{ width: '100%', margin: 'auto' }}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <Button btnType=\"Danger\" clicked={props.checkoutCanceld}>CANCEL</Button>\r\n            <Button btnType=\"Success\" clicked={props.checkoutContineu}>CONTENUE</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckoutSummary;\r\n","import React, { Component } from \"react\";\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ContactData from './ContactDate/ContactDate';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\n\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutCanceldHeandler = () => {\r\n        this.props.history.goBabk()\r\n    };\r\n\r\n    checkoutContineuHeandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    };\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\" />;\r\n        if (this.props.ings) {\r\n            const purcasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            summary = (\r\n                <div >\r\n                    {purcasedRedirect}\r\n                    <CheckoutSummary\r\n                        ingredients={this.props.ings}\r\n                        checkoutCanceld={this.checkoutCanceldHeandler}\r\n                        checkoutContineu={this.checkoutContineuHeandler} />\r\n                    <Route\r\n                        path={this.props.match.path + '/contact-data'}\r\n                        component={ContactData} />\r\n                </div>\r\n            );\r\n        }\r\n        return summary\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from \"react\";\r\n\r\nimport classes from './input.module.css'\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shuldvalidte && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    };\r\n\r\n    switch (props.elementtype) {\r\n        case ('input'):\r\n            inputElement = <input onChange={props.changed} className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea onChange={props.changed} className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select onChange={props.changed} className={inputClasses.join(' ')} value={props.value}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}> {option.displayValue}</option>\r\n                    ))}\r\n                </select >\r\n            )\r\n            break;\r\n\r\n        default: inputElement = <input\r\n            className={inputClasses.join(' ')}\r\n            {...props.elementConfig}\r\n            value={props.value}\r\n            onChange={props.changed} />;\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"input_Input__3RI6i\",\"Label\":\"input_Label__1W2P6\",\"InputElement\":\"input_InputElement__2rKU-\",\"Invalid\":\"input_Invalid__D-t9c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactDate\":\"ContactDate_ContactDate__3vdMr\"};"],"sourceRoot":""}